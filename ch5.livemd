<!-- livebook:{"persist_outputs":true} -->

# Chapter 5. Traditional Machine Learning

```elixir
Mix.install([
{:scholar, "~> 0.2"},
{:nx, "~> 0.5"},
{:exla, "~> 0.5"},
{:vega_lite, "~> 0.1.6"},
{:kino_vega_lite, "~> 0.1.6"},
{:scidata, "~> 0.1"}
])
```

## Introduction

[Scholar](https://github.com/elixir-nx/scholar) is a set of machine learning tools built on top of Elixir and Nx.

## Learning Linearly

```elixir
Nx.default_backend(EXLA.Backend)
Nx.Defn.default_options(compiler: EXLA)
```

<!-- livebook:{"output":true} -->

```
[]
```

Deep learning refers to a subset of machine learning that uses neural networks.

Shallow machine learning refers to non-deep learning based algorithms.

Linear models are a class of machine learning algorithms that assume linearity in the underlying relationship between inputs and outputs.

Linear models assume that input data can be modeled with a line.

Reality is almost never linear, but linear models are still powerful at modeling the real-world.

## Linear Regression with Scholar

Linear regression is an approach for modeling the relationship between some scalar target variable and one or more input variables, generally based on the following ecuation:

y = mx + b

This equation represents a linear relationship between the target variable y
and the input variable x. m and b represent the slope and intercept of the line respectively. Given a m and b, you can predict any y from any x.

```elixir
model = fn(x) -> 3.0*x + 2.0 end
IO.inspect model.(2)
```

<!-- livebook:{"output":true} -->

```
8.0
```

<!-- livebook:{"output":true} -->

```
8.0
```

```elixir
# declare target parameters m and b as random scalars.
m = :rand.uniform() * 10
b = :random.uniform() * 10

IO.inspect({m, b})


key = Nx.Random.key(42)
size = 100
{x, new_key} = Nx.Random.normal(key, 0.0, 1.0, shape: {size, 1})
{noise_x, new_key} = Nx.Random.normal(new_key, 0.0, 1.0, shape: {size, 1})

y =
  x
  |> Nx.add(noise_x)
  |> Nx.multiply(m)
  |> Nx.add(b)


```

<!-- livebook:{"output":true} -->

```
{7.127960911399235, 8.890262476816197}
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[100][1]
  EXLA.Backend<host:0, 0.2132677841.629800981.257912>
  [
    [2.7127890586853027],
    [8.6709566116333],
    [14.055459976196289],
    [-0.4634389877319336],
    [11.291205406188965],
    [10.708942413330078],
    [12.386322975158691],
    [5.757279396057129],
    [10.77592658996582],
    [15.383848190307617],
    [3.371713161468506],
    [29.774051666259766],
    [10.911657333374023],
    [15.42471981048584],
    [10.684042930603027],
    [14.729745864868164],
    [6.8930511474609375],
    [5.9595947265625],
    [21.258739471435547],
    [-9.77812385559082],
    [-10.10188102722168],
    [6.516267776489258],
    [10.295116424560547],
    [9.956613540649414],
    [16.224559783935547],
    [15.154407501220703],
    [17.878273010253906],
    [16.638500213623047],
    [29.15172576904297],
    [-6.512458801269531],
    [-10.847896575927734],
    [13.589961051940918],
    [22.40196990966797],
    [15.14294719696045],
    [20.485660552978516],
    [32.87843322753906],
    [14.044270515441895],
    [3.5640621185302734],
    [-7.133121490478516],
    [26.32321548461914],
    [11.510627746582031],
    [39.547821044921875],
    [10.927038192749023],
    [14.996025085449219],
    [11.065106391906738],
    [26.99099349975586],
    [14.03846549987793],
    [10.290056228637695],
    [-2.2950525283813477],
    [4.35237979888916],
    ...
  ]
>
```

```elixir
# Plotting
alias VegaLite, as: Vl
Vl.new(title: "Scatterplot", width: 720, height: 480)
|> Vl.data_from_values(%{
x: Nx.to_flat_list(x),
y: Nx.to_flat_list(y)
})
|> Vl.mark(:point)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"x":-0.5951409339904785,"y":2.7127890586853027},{"x":0.0132689718157053,"y":8.6709566116333},{"x":0.7378900647163391,"y":14.055459976196289},{"x":0.21672981977462769,"y":-0.4634389877319336},{"x":1.268314003944397,"y":11.291205406188965},{"x":0.08188837766647339,"y":10.708942413330078},{"x":-0.01103353314101696,"y":12.386322975158691},{"x":-1.4509247541427612,"y":5.757279396057129},{"x":-0.5412119030952454,"y":10.77592658996582},{"x":0.8773791790008545,"y":15.383848190307617},{"x":-0.48833128809928894,"y":3.371713161468506},{"x":1.237937092781067,"y":29.774051666259766},{"x":0.9093202352523804,"y":10.911657333374023},{"x":0.1803722381591797,"y":15.42471981048584},{"x":-0.5572141408920288,"y":10.684042930603027},{"x":0.7308189868927002,"y":14.729745864868164},{"x":0.34681081771850586,"y":6.8930511474609375},{"x":0.529615581035614,"y":5.9595947265625},{"x":0.03764510527253151,"y":21.258739471435547},{"x":-1.409928560256958,"y":-9.77812385559082},{"x":-1.43599534034729,"y":-10.10188102722168},{"x":-0.9735497236251831,"y":6.516267776489258},{"x":-1.3374433517456055,"y":10.295116424560547},{"x":-0.670516312122345,"y":9.956613540649414},{"x":-0.10266610980033875,"y":16.224559783935547},{"x":0.3223346173763275,"y":15.154407501220703},{"x":-0.4511873126029968,"y":17.878273010253906},{"x":-0.007002972066402435,"y":16.638500213623047},{"x":2.520038366317749,"y":29.15172576904297},{"x":-0.4965696930885315,"y":-6.512458801269531},{"x":-2.2178070545196533,"y":-10.847896575927734},{"x":-0.01344812661409378,"y":13.589961051940918},{"x":0.33387258648872375,"y":22.40196990966797},{"x":0.7982445359230042,"y":15.14294719696045},{"x":0.20930752158164978,"y":20.485660552978516},{"x":1.9826748371124268,"y":32.87843322753906},{"x":0.45826175808906555,"y":14.044270515441895},{"x":0.5479519963264465,"y":3.5640621185302734},{"x":-1.2041635513305664,"y":-7.133121490478516},{"x":2.0047168731689453,"y":26.32321548461914},{"x":0.16586682200431824,"y":11.510627746582031},{"x":1.70429527759552,"y":39.547821044921875},{"x":-0.16112852096557617,"y":10.927038192749023},{"x":1.2452048063278198,"y":14.996025085449219},{"x":0.1535537838935852,"y":11.065106391906738},{"x":1.5046494007110596,"y":26.99099349975586},{"x":0.013979915529489517,"y":14.03846549987793},{"x":1.38029944896698,"y":10.290056228637695},{"x":-0.3476333022117615,"y":-2.2950525283813477},{"x":0.9467588067054749,"y":4.35237979888916},{"x":-1.1229523420333862,"y":0.9695515632629395},{"x":1.3731545209884644,"y":17.252826690673828},{"x":1.5248982906341553,"y":8.677838325500488},{"x":-0.83209627866745,"y":2.1267833709716797},{"x":-0.4361415207386017,"y":-4.317472457885742},{"x":-0.9708554148674011,"y":8.883650779724121},{"x":-0.02753218077123165,"y":13.6202392578125},{"x":-0.6075385808944702,"y":0.8106098175048828},{"x":0.69698166847229,"y":16.70366668701172},{"x":-1.5198605060577393,"y":2.8540544509887695},{"x":1.4279040098190308,"y":28.850080490112305},{"x":-0.7271621227264404,"y":1.8234553337097168},{"x":0.6438417434692383,"y":9.987939834594727},{"x":0.02894657850265503,"y":-1.0028610229492188},{"x":-0.7837653756141663,"y":3.805777072906494},{"x":-0.7311482429504395,"y":-0.6758689880371094},{"x":-1.8962322473526,"y":-5.965917587280273},{"x":-0.09240781515836716,"y":-2.300992965698242},{"x":0.8312447667121887,"y":21.998741149902344},{"x":0.08850807696580887,"y":8.637687683105469},{"x":1.0102239847183228,"y":12.53564739227295},{"x":-0.9956196546554565,"y":8.971024513244629},{"x":0.050282858312129974,"y":13.483007431030273},{"x":1.5256069898605347,"y":29.654775619506836},{"x":-1.3656818866729736,"y":-11.971107482910156},{"x":0.3665124475955963,"y":12.797372817993164},{"x":-1.4678500890731812,"y":3.769291877746582},{"x":-1.353937029838562,"y":-2.5884265899658203},{"x":-0.7861266136169434,"y":0.4926929473876953},{"x":-1.6958731412887573,"y":-13.107795715332031},{"x":0.10122056305408478,"y":-12.413864135742188},{"x":1.315024971961975,"y":12.550955772399902},{"x":0.6036592125892639,"y":12.205528259277344},{"x":-2.478543519973755,"y":2.6528220176696777},{"x":-0.7435773611068726,"y":12.592144012451172},{"x":-2.687534809112549,"y":-7.751857757568359},{"x":0.6872367858886719,"y":5.45736837387085},{"x":1.3363817930221558,"y":22.331119537353516},{"x":-0.5790861248970032,"y":0.9903964996337891},{"x":0.3402725160121918,"y":15.728372573852539},{"x":-0.5970014929771423,"y":0.32383155822753906},{"x":1.373253345489502,"y":34.81644058227539},{"x":1.02512788772583,"y":29.581260681152344},{"x":-1.009821891784668,"y":2.134939670562744},{"x":-0.14097319543361664,"y":8.421722412109375},{"x":-0.027422772720456123,"y":17.47516441345215},{"x":0.9244212508201599,"y":13.697948455810547},{"x":0.7690575122833252,"y":8.416539192199707},{"x":1.485957384109497,"y":27.9095516204834},{"x":-0.8444464802742004,"y":-11.321039199829102}]},"encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}},"height":480,"mark":"point","title":"Scatterplot","width":720}
```

```elixir
model = Scholar.Linear.LinearRegression.fit(x, y)
```

<!-- livebook:{"output":true} -->

```
%Scholar.Linear.LinearRegression{
  coefficients: #Nx.Tensor<
    f32[1][1]
    EXLA.Backend<host:0, 0.2132677841.629800981.257914>
    [
      [8.017552375793457]
    ]
  >,
  intercept: #Nx.Tensor<
    f32[1]
    EXLA.Backend<host:0, 0.2132677841.629800981.257915>
    [9.441580772399902]
  >
}
```

```elixir
Scholar.Linear.LinearRegression.predict(model, Nx.iota({3, 1}))
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[3][1]
  EXLA.Backend<host:0, 0.2132677841.629800981.257919>
  [
    [9.441580772399902],
    [17.45913314819336],
    [25.4766845703125]
  ]
>
```

```elixir
pred_xs = Nx.linspace(-3.0, 3.0, n: 100) |> Nx.new_axis(-1)
pred_ys = Scholar.Linear.LinearRegression.predict(model, pred_xs)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[100][1]
  EXLA.Backend<host:0, 0.2132677841.629800981.257936>
  [
    [-14.611076354980469],
    [-14.125164985656738],
    [-13.639252662658691],
    [-13.153339385986328],
    [-12.667427062988281],
    [-12.18151569366455],
    [-11.695601463317871],
    [-11.20969009399414],
    [-10.723777770996094],
    [-10.237866401672363],
    [-9.751954078674316],
    [-9.266040802001953],
    [-8.780129432678223],
    [-8.294217109680176],
    [-7.808303356170654],
    [-7.322391510009766],
    [-6.836479663848877],
    [-6.3505682945251465],
    [-5.864655494689941],
    [-5.378742694854736],
    [-4.892830848693848],
    [-4.406919002532959],
    [-3.921006202697754],
    [-3.435093402862549],
    [-2.94918155670166],
    [-2.4632699489593506],
    [-1.977357029914856],
    [-1.4914443492889404],
    [-1.0055325031280518],
    [-0.5196207165718079],
    [-0.03370796516537666],
    [0.45220479369163513],
    [0.9381166100502014],
    [1.4240283966064453],
    [1.909940242767334],
    [2.3958539962768555],
    [2.881765604019165],
    [3.3676774501800537],
    [3.853591203689575],
    [4.339502811431885],
    [4.825414657592773],
    [5.311326503753662],
    [5.797238349914551],
    [6.283152103424072],
    [6.769063949584961],
    [7.25497579574585],
    [7.740889549255371],
    [8.226800918579102],
    [8.712713241577148],
    [9.198624610900879],
    ...
  ]
>
```

```elixir
# plot the predictions overlayed with your original data
title = "Scatterplot Distribution and Fit Curve"

Vl.new(title: title, width: 720, height: 480)
|> Vl.data_from_values(%{
  x: Nx.to_flat_list(x),
  y: Nx.to_flat_list(y),
  pred_x: Nx.to_flat_list(pred_xs),
  pred_y: Nx.to_flat_list(pred_ys)
})
|> Vl.layers([
  Vl.new()
  |> Vl.mark(:point)
  |> Vl.encode_field(:x, "x", type: :quantitative)
  |> Vl.encode_field(:y, "y", type: :quantitative),
  Vl.new()
  |> Vl.mark(:line)
  |> Vl.encode_field(:x, "pred_x", type: :quantitative)
  |> Vl.encode_field(:y, "pred_y", type: :quantitative)
])
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"pred_x":-3.0,"pred_y":-14.611076354980469,"x":-0.5951409339904785,"y":2.7127890586853027},{"pred_x":-2.939393997192383,"pred_y":-14.125164985656738,"x":0.0132689718157053,"y":8.6709566116333},{"pred_x":-2.8787879943847656,"pred_y":-13.639252662658691,"x":0.7378900647163391,"y":14.055459976196289},{"pred_x":-2.8181817531585693,"pred_y":-13.153339385986328,"x":0.21672981977462769,"y":-0.4634389877319336},{"pred_x":-2.757575750350952,"pred_y":-12.667427062988281,"x":1.268314003944397,"y":11.291205406188965},{"pred_x":-2.696969747543335,"pred_y":-12.18151569366455,"x":0.08188837766647339,"y":10.708942413330078},{"pred_x":-2.6363635063171387,"pred_y":-11.695601463317871,"x":-0.01103353314101696,"y":12.386322975158691},{"pred_x":-2.5757575035095215,"pred_y":-11.20969009399414,"x":-1.4509247541427612,"y":5.757279396057129},{"pred_x":-2.5151515007019043,"pred_y":-10.723777770996094,"x":-0.5412119030952454,"y":10.77592658996582},{"pred_x":-2.454545497894287,"pred_y":-10.237866401672363,"x":0.8773791790008545,"y":15.383848190307617},{"pred_x":-2.39393949508667,"pred_y":-9.751954078674316,"x":-0.48833128809928894,"y":3.371713161468506},{"pred_x":-2.3333332538604736,"pred_y":-9.266040802001953,"x":1.237937092781067,"y":29.774051666259766},{"pred_x":-2.2727272510528564,"pred_y":-8.780129432678223,"x":0.9093202352523804,"y":10.911657333374023},{"pred_x":-2.2121212482452393,"pred_y":-8.294217109680176,"x":0.1803722381591797,"y":15.42471981048584},{"pred_x":-2.151515007019043,"pred_y":-7.808303356170654,"x":-0.5572141408920288,"y":10.684042930603027},{"pred_x":-2.090909004211426,"pred_y":-7.322391510009766,"x":0.7308189868927002,"y":14.729745864868164},{"pred_x":-2.0303030014038086,"pred_y":-6.836479663848877,"x":0.34681081771850586,"y":6.8930511474609375},{"pred_x":-1.9696969985961914,"pred_y":-6.3505682945251465,"x":0.529615581035614,"y":5.9595947265625},{"pred_x":-1.9090908765792847,"pred_y":-5.864655494689941,"x":0.03764510527253151,"y":21.258739471435547},{"pred_x":-1.848484754562378,"pred_y":-5.378742694854736,"x":-1.409928560256958,"y":-9.77812385559082},{"pred_x":-1.7878787517547607,"pred_y":-4.892830848693848,"x":-1.43599534034729,"y":-10.10188102722168},{"pred_x":-1.7272727489471436,"pred_y":-4.406919002532959,"x":-0.9735497236251831,"y":6.516267776489258},{"pred_x":-1.6666666269302368,"pred_y":-3.921006202697754,"x":-1.3374433517456055,"y":10.295116424560547},{"pred_x":-1.60606050491333,"pred_y":-3.435093402862549,"x":-0.670516312122345,"y":9.956613540649414},{"pred_x":-1.545454502105713,"pred_y":-2.94918155670166,"x":-0.10266610980033875,"y":16.224559783935547},{"pred_x":-1.4848484992980957,"pred_y":-2.4632699489593506,"x":0.3223346173763275,"y":15.154407501220703},{"pred_x":-1.424242377281189,"pred_y":-1.977357029914856,"x":-0.4511873126029968,"y":17.878273010253906},{"pred_x":-1.3636362552642822,"pred_y":-1.4914443492889404,"x":-0.007002972066402435,"y":16.638500213623047},{"pred_x":-1.303030252456665,"pred_y":-1.0055325031280518,"x":2.520038366317749,"y":29.15172576904297},{"pred_x":-1.2424242496490479,"pred_y":-0.5196207165718079,"x":-0.4965696930885315,"y":-6.512458801269531},{"pred_x":-1.1818181276321411,"pred_y":-0.03370796516537666,"x":-2.2178070545196533,"y":-10.847896575927734},{"pred_x":-1.1212120056152344,"pred_y":0.45220479369163513,"x":-0.01344812661409378,"y":13.589961051940918},{"pred_x":-1.0606060028076172,"pred_y":0.9381166100502014,"x":0.33387258648872375,"y":22.40196990966797},{"pred_x":-1.0,"pred_y":1.4240283966064453,"x":0.7982445359230042,"y":15.14294719696045},{"pred_x":-0.9393939971923828,"pred_y":1.909940242767334,"x":0.20930752158164978,"y":20.485660552978516},{"pred_x":-0.8787877559661865,"pred_y":2.3958539962768555,"x":1.9826748371124268,"y":32.87843322753906},{"pred_x":-0.8181817531585693,"pred_y":2.881765604019165,"x":0.45826175808906555,"y":14.044270515441895},{"pred_x":-0.7575757503509521,"pred_y":3.3676774501800537,"x":0.5479519963264465,"y":3.5640621185302734},{"pred_x":-0.6969695091247559,"pred_y":3.853591203689575,"x":-1.2041635513305664,"y":-7.133121490478516},{"pred_x":-0.6363635063171387,"pred_y":4.339502811431885,"x":2.0047168731689453,"y":26.32321548461914},{"pred_x":-0.5757575035095215,"pred_y":4.825414657592773,"x":0.16586682200431824,"y":11.510627746582031},{"pred_x":-0.5151515007019043,"pred_y":5.311326503753662,"x":1.70429527759552,"y":39.547821044921875},{"pred_x":-0.4545454978942871,"pred_y":5.797238349914551,"x":-0.16112852096557617,"y":10.927038192749023},{"pred_x":-0.3939392566680908,"pred_y":6.283152103424072,"x":1.2452048063278198,"y":14.996025085449219},{"pred_x":-0.33333325386047363,"pred_y":6.769063949584961,"x":0.1535537838935852,"y":11.065106391906738},{"pred_x":-0.27272725105285645,"pred_y":7.25497579574585,"x":1.5046494007110596,"y":26.99099349975586},{"pred_x":-0.21212100982666016,"pred_y":7.740889549255371,"x":0.013979915529489517,"y":14.03846549987793},{"pred_x":-0.15151500701904297,"pred_y":8.226800918579102,"x":1.38029944896698,"y":10.290056228637695},{"pred_x":-0.09090900421142578,"pred_y":8.712713241577148,"x":-0.3476333022117615,"y":-2.2950525283813477},{"pred_x":-0.030303001403808594,"pred_y":9.198624610900879,"x":0.9467588067054749,"y":4.35237979888916},{"pred_x":0.030303001403808594,"pred_y":9.684536933898926,"x":-1.1229523420333862,"y":0.9695515632629395},{"pred_x":0.09090924263000488,"pred_y":10.170450210571289,"x":1.3731545209884644,"y":17.252826690673828},{"pred_x":0.15151524543762207,"pred_y":10.656362533569336,"x":1.5248982906341553,"y":8.677838325500488},{"pred_x":0.21212124824523926,"pred_y":11.142273902893066,"x":-0.83209627866745,"y":2.1267833709716797},{"pred_x":0.27272748947143555,"pred_y":11.628188133239746,"x":-0.4361415207386017,"y":-4.317472457885742},{"pred_x":0.33333349227905273,"pred_y":12.114099502563477,"x":-0.9708554148674011,"y":8.883650779724121},{"pred_x":0.3939394950866699,"pred_y":12.600010871887207,"x":-0.02753218077123165,"y":13.6202392578125},{"pred_x":0.4545454978942871,"pred_y":13.085923194885254,"x":-0.6075385808944702,"y":0.8106098175048828},{"pred_x":0.5151515007019043,"pred_y":13.571834564208984,"x":0.69698166847229,"y":16.70366668701172},{"pred_x":0.5757577419281006,"pred_y":14.057748794555664,"x":-1.5198605060577393,"y":2.8540544509887695},{"pred_x":0.6363637447357178,"pred_y":14.543660163879395,"x":1.4279040098190308,"y":28.850080490112305},{"pred_x":0.696969747543335,"pred_y":15.029572486877441,"x":-0.7271621227264404,"y":1.8234553337097168},{"pred_x":0.7575759887695312,"pred_y":15.515485763549805,"x":0.6438417434692383,"y":9.987939834594727},{"pred_x":0.8181819915771484,"pred_y":16.00139808654785,"x":0.02894657850265503,"y":-1.0028610229492188},{"pred_x":0.8787879943847656,"pred_y":16.4873104095459,"x":-0.7837653756141663,"y":3.805777072906494},{"pred_x":0.9393939971923828,"pred_y":16.973220825195312,"x":-0.7311482429504395,"y":-0.6758689880371094},{"pred_x":1.0,"pred_y":17.45913314819336,"x":-1.8962322473526,"y":-5.965917587280273},{"pred_x":1.0606060028076172,"pred_y":17.945045471191406,"x":-0.09240781515836716,"y":-2.300992965698242},{"pred_x":1.1212120056152344,"pred_y":18.43095588684082,"x":0.8312447667121887,"y":21.998741149902344},{"pred_x":1.1818184852600098,"pred_y":18.916872024536133,"x":0.08850807696580887,"y":8.637687683105469},{"pred_x":1.242424488067627,"pred_y":19.40278434753418,"x":1.0102239847183228,"y":12.53564739227295},{"pred_x":1.3030304908752441,"pred_y":19.888696670532227,"x":-0.9956196546554565,"y":8.971024513244629},{"pred_x":1.3636364936828613,"pred_y":20.37460708618164,"x":0.050282858312129974,"y":13.483007431030273},{"pred_x":1.4242424964904785,"pred_y":20.860519409179688,"x":1.5256069898605347,"y":29.654775619506836},{"pred_x":1.4848484992980957,"pred_y":21.346431732177734,"x":-1.3656818866729736,"y":-11.971107482910156},{"pred_x":1.545454502105713,"pred_y":21.83234405517578,"x":0.3665124475955963,"y":12.797372817993164},{"pred_x":1.6060609817504883,"pred_y":22.31825828552246,"x":-1.4678500890731812,"y":3.769291877746582},{"pred_x":1.6666669845581055,"pred_y":22.804170608520508,"x":-1.353937029838562,"y":-2.5884265899658203},{"pred_x":1.7272729873657227,"pred_y":23.290082931518555,"x":-0.7861266136169434,"y":0.4926929473876953},{"pred_x":1.7878789901733398,"pred_y":23.77599334716797,"x":-1.6958731412887573,"y":-13.107795715332031},{"pred_x":1.848484992980957,"pred_y":24.261905670166016,"x":0.10122056305408478,"y":-12.413864135742188},{"pred_x":1.9090909957885742,"pred_y":24.747817993164062,"x":1.315024971961975,"y":12.550955772399902},{"pred_x":1.9696969985961914,"pred_y":25.23373031616211,"x":0.6036592125892639,"y":12.205528259277344},{"pred_x":2.0303030014038086,"pred_y":25.719640731811523,"x":-2.478543519973755,"y":2.6528220176696777},{"pred_x":2.090909004211426,"pred_y":26.20555305480957,"x":-0.7435773611068726,"y":12.592144012451172},{"pred_x":2.151515483856201,"pred_y":26.691469192504883,"x":-2.687534809112549,"y":-7.751857757568359},{"pred_x":2.2121214866638184,"pred_y":27.17738151550293,"x":0.6872367858886719,"y":5.45736837387085},{"pred_x":2.2727274894714355,"pred_y":27.663291931152344,"x":1.3363817930221558,"y":22.331119537353516},{"pred_x":2.3333334922790527,"pred_y":28.14920425415039,"x":-0.5790861248970032,"y":0.9903964996337891},{"pred_x":2.39393949508667,"pred_y":28.635116577148438,"x":0.3402725160121918,"y":15.728372573852539},{"pred_x":2.454545497894287,"pred_y":29.12102699279785,"x":-0.5970014929771423,"y":0.32383155822753906},{"pred_x":2.5151515007019043,"pred_y":29.6069393157959,"x":1.373253345489502,"y":34.81644058227539},{"pred_x":2.5757579803466797,"pred_y":30.09285545349121,"x":1.02512788772583,"y":29.581260681152344},{"pred_x":2.636363983154297,"pred_y":30.578767776489258,"x":-1.009821891784668,"y":2.134939670562744},{"pred_x":2.696969985961914,"pred_y":31.064678192138672,"x":-0.14097319543361664,"y":8.421722412109375},{"pred_x":2.7575759887695312,"pred_y":31.55059051513672,"x":-0.027422772720456123,"y":17.47516441345215},{"pred_x":2.8181819915771484,"pred_y":32.036502838134766,"x":0.9244212508201599,"y":13.697948455810547},{"pred_x":2.8787879943847656,"pred_y":32.52241516113281,"x":0.7690575122833252,"y":8.416539192199707},{"pred_x":2.939393997192383,"pred_y":33.00832748413086,"x":1.485957384109497,"y":27.9095516204834},{"pred_x":3.0,"pred_y":33.494239807128906,"x":-0.8444464802742004,"y":-11.321039199829102}]},"height":480,"layer":[{"encoding":{"x":{"field":"x","type":"quantitative"},"y":{"field":"y","type":"quantitative"}},"mark":"point"},{"encoding":{"x":{"field":"pred_x","type":"quantitative"},"y":{"field":"pred_y","type":"quantitative"}},"mark":"line"}],"title":"Scatterplot Distribution and Fit Curve","width":720}
```

## Logistic Regression with Scholar

Logistic regression is almost identical to linear regression. However, after applying the linear transformation on the input variables, you also apply a logistic function, which squeezes the output between 0 and 1.

Often times, the output represents a probability for a binary classification problem. However, it can also be extended to work for multi-class
classification problems.

```elixir
{inputs, targets} = Scidata.Wine.download()
```

<!-- livebook:{"output":true} -->

```
{[
   [14.23, 1.71, 2.43, 15.6, 127.0, 2.8, 3.06, 0.28, 2.29, 5.64, 1.04, 3.92, 1065.0],
   [13.2, 1.78, 2.14, 11.2, 100.0, 2.65, 2.76, 0.26, 1.28, 4.38, 1.05, 3.4, 1050.0],
   [13.16, 2.36, 2.67, 18.6, 101.0, 2.8, 3.24, 0.3, 2.81, 5.68, 1.03, 3.17, 1185.0],
   [14.37, 1.95, 2.5, 16.8, 113.0, 3.85, 3.49, 0.24, 2.18, 7.8, 0.86, 3.45, 1480.0],
   [13.24, 2.59, 2.87, 21.0, 118.0, 2.8, 2.69, 0.39, 1.82, 4.32, 1.04, 2.93, 735.0],
   [14.2, 1.76, 2.45, 15.2, 112.0, 3.27, 3.39, 0.34, 1.97, 6.75, 1.05, 2.85, 1450.0],
   [14.39, 1.87, 2.45, 14.6, 96.0, 2.5, 2.52, 0.3, 1.98, 5.25, 1.02, 3.58, 1290.0],
   [14.06, 2.15, 2.61, 17.6, 121.0, 2.6, 2.51, 0.31, 1.25, 5.05, 1.06, 3.58, 1295.0],
   [14.83, 1.64, 2.17, 14.0, 97.0, 2.8, 2.98, 0.29, 1.98, 5.2, 1.08, 2.85, 1045.0],
   [13.86, 1.35, 2.27, 16.0, 98.0, 2.98, 3.15, 0.22, 1.85, 7.22, 1.01, 3.55, 1045.0],
   [14.1, 2.16, 2.3, 18.0, 105.0, 2.95, 3.32, 0.22, 2.38, 5.75, 1.25, 3.17, 1510.0],
   [14.12, 1.48, 2.32, 16.8, 95.0, 2.2, 2.43, 0.26, 1.57, 5.0, 1.17, 2.82, 1280.0],
   [13.75, 1.73, 2.41, 16.0, 89.0, 2.6, 2.76, 0.29, 1.81, 5.6, 1.15, 2.9, 1320.0],
   [14.75, 1.73, 2.39, 11.4, 91.0, 3.1, 3.69, 0.43, 2.81, 5.4, 1.25, 2.73, 1150.0],
   [14.38, 1.87, 2.38, 12.0, 102.0, 3.3, 3.64, 0.29, 2.96, 7.5, 1.2, 3.0, 1547.0],
   [13.63, 1.81, 2.7, 17.2, 112.0, 2.85, 2.91, 0.3, 1.46, 7.3, 1.28, 2.88, 1310.0],
   [14.3, 1.92, 2.72, 20.0, 120.0, 2.8, 3.14, 0.33, 1.97, 6.2, 1.07, 2.65, 1280.0],
   [13.83, 1.57, 2.62, 20.0, 115.0, 2.95, 3.4, 0.4, 1.72, 6.6, 1.13, 2.57, 1130.0],
   [14.19, 1.59, 2.48, 16.5, 108.0, 3.3, 3.93, 0.32, 1.86, 8.7, 1.23, 2.82, 1680.0],
   [13.64, 3.1, 2.56, 15.2, 116.0, 2.7, 3.03, 0.17, 1.66, 5.1, 0.96, 3.36, 845.0],
   [14.06, 1.63, 2.28, 16.0, 126.0, 3.0, 3.17, 0.24, 2.1, 5.65, 1.09, 3.71, 780.0],
   [12.93, 3.8, 2.65, 18.6, 102.0, 2.41, 2.41, 0.25, 1.98, 4.5, 1.03, 3.52, 770.0],
   [13.71, 1.86, 2.36, 16.6, 101.0, 2.61, 2.88, 0.27, 1.69, 3.8, 1.11, 4.0, 1035.0],
   [12.85, 1.6, 2.52, 17.8, 95.0, 2.48, 2.37, 0.26, 1.46, 3.93, 1.09, 3.63, 1015.0],
   [13.5, 1.81, 2.61, 20.0, 96.0, 2.53, 2.61, 0.28, 1.66, 3.52, 1.12, 3.82, 845.0],
   [13.05, 2.05, 3.22, 25.0, 124.0, 2.63, 2.68, 0.47, 1.92, 3.58, 1.13, 3.2, 830.0],
   [13.39, 1.77, 2.62, 16.1, 93.0, 2.85, 2.94, 0.34, 1.45, 4.8, 0.92, 3.22, 1195.0],
   [13.3, 1.72, 2.14, 17.0, 94.0, 2.4, 2.19, 0.27, 1.35, 3.95, 1.02, 2.77, 1285.0],
   [13.87, 1.9, 2.8, 19.4, 107.0, 2.95, 2.97, 0.37, 1.76, 4.5, 1.25, 3.4, 915.0],
   [14.02, 1.68, 2.21, 16.0, 96.0, 2.65, 2.33, 0.26, 1.98, 4.7, 1.04, 3.59, 1035.0],
   [13.73, 1.5, 2.7, 22.5, 101.0, 3.0, 3.25, 0.29, 2.38, 5.7, 1.19, 2.71, 1285.0],
   [13.58, 1.66, 2.36, 19.1, 106.0, 2.86, 3.19, 0.22, 1.95, 6.9, 1.09, 2.88, 1515.0],
   [13.68, 1.83, 2.36, 17.2, 104.0, 2.42, 2.69, 0.42, 1.97, 3.84, 1.23, 2.87, 990.0],
   [13.76, 1.53, 2.7, 19.5, 132.0, 2.95, 2.74, 0.5, 1.35, 5.4, 1.25, 3.0, 1235.0],
   [13.51, 1.8, 2.65, 19.0, 110.0, 2.35, 2.53, 0.29, 1.54, 4.2, 1.1, 2.87, 1095.0],
   [13.48, 1.81, 2.41, 20.5, 100.0, 2.7, 2.98, 0.26, 1.86, 5.1, 1.04, 3.47, 920.0],
   [13.28, 1.64, 2.84, 15.5, 110.0, 2.6, 2.68, 0.34, 1.36, 4.6, 1.09, 2.78, ...],
   [13.05, 1.65, 2.55, 18.0, 98.0, 2.45, 2.43, 0.29, 1.44, 4.25, 1.12, ...],
   [13.07, 1.5, 2.1, 15.5, 98.0, 2.4, 2.64, 0.28, 1.37, 3.7, ...],
   [14.22, 3.99, 2.51, 13.2, 128.0, 3.0, 3.04, 0.2, 2.08, ...],
   [13.56, 1.71, 2.31, 16.2, 117.0, 3.15, 3.29, 0.34, ...],
   [13.41, 3.84, 2.12, 18.8, 90.0, 2.45, 2.68, ...],
   [13.88, 1.89, 2.59, 15.0, 101.0, 3.25, ...],
   [13.24, 3.98, 2.29, 17.5, 103.0, ...],
   [13.05, 1.77, 2.1, 17.0, ...],
   [14.21, 4.04, 2.44, ...],
   [14.38, 3.59, ...],
   [13.9, ...],
   [...],
   ...
 ],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]}
```

```elixir
# Split dataset into training and test sets

{train, test} =
  inputs
  |> Enum.zip(targets)
  |> Enum.shuffle()
  |> Enum.split(floor(length(inputs) * 0.8))

{train_inputs, train_targets} = Enum.unzip(train)
train_inputs = Nx.tensor(train_inputs)
train_targets = Nx.tensor(train_targets)
{test_inputs, test_targets} = Enum.unzip(test)
test_inputs = Nx.tensor(test_inputs)
test_targets = Nx.tensor(test_targets)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[36]
  EXLA.Backend<host:0, 0.2132677841.629800987.258784>
  [0, 1, 0, 2, 2, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 2, 1, 1, 2, 0, 2, 2, 2, 2, 1, 2, 0, 0, 1, 2, 2, 2, 2, 2, 0, 1]
>
```

```elixir
# Normalize the inputs
train_inputs = Scholar.Preprocessing.min_max_scale(train_inputs)
test_inputs = Scholar.Preprocessing.min_max_scale(test_inputs)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[36][13]
  EXLA.Backend<host:0, 0.2132677841.629800981.258116>
  [
    [0.00892153475433588, 0.0019406158244237304, 0.0015829596668481827, 0.009954763576388359, 0.07671725004911423, 0.0016756854020059109, 0.0018942529568448663, 0.0, 9.868660708889365e-4, 0.0032652681693434715, 5.232376861386001e-4, 0.0021128205116838217, 0.5595530867576599],
    [0.007577011827379465, 7.815450080670416e-4, 0.0016756854020059109, 0.01313392911106348, 0.06214607134461403, 0.001702178386040032, 0.001821397221647203, 7.947914127726108e-5, 0.0015365967992693186, 0.0016425690846517682, 5.232376861386001e-4, 0.00204658810980618, 0.45026925206184387],
    [0.008914911188185215, 0.0010862150229513645, 0.0016756854020059109, 0.011279416270554066, 0.07406794279813766, 0.001775034237653017, 0.0018147738883271813, 8.61024163896218e-5, 8.544009178876877e-4, 0.004722386132925749, 7.351821404881775e-4, 0.00179490412119776, 0.8675347566604614],
    [0.008881795220077038, 0.0015962061006575823, 0.0016690620686858892, 0.01611439697444439, 0.06943166255950928, 9.140102192759514e-4, 4.4375855941325426e-4, 1.4571176143363118e-4, 9.073869441635907e-4, 0.005623149685561657, 3.775259538087994e-4, ...],
    ...
  ]
>
```

```elixir
model =
  Scholar.Linear.LogisticRegression.fit(
    train_inputs,
    train_targets,
    num_classes: 3
  )

# Note: specify num_classes: 3 because the original dataset has three classes.
# Since the original problem is a multi-class classification problem.
```

<!-- livebook:{"output":true} -->

```
%Scholar.Linear.LogisticRegression{
  coefficients: #Nx.Tensor<
    f32[13][3]
    EXLA.Backend<host:0, 0.2132677841.629800981.258121>
    [
      [1.098338007926941, 0.9313427209854126, 0.9703208804130554],
      [1.1462441682815552, 0.8589483499526978, 0.9948075413703918],
      [1.0249682664871216, 0.9802214503288269, 0.9948142766952515],
      [1.0094454288482666, 1.0367037057876587, 0.9538517594337463],
      [0.9032698273658752, 1.3280353546142578, 0.7686939239501953],
      [0.9657244086265564, 1.0392184257507324, 0.9950602054595947],
      [0.9112056493759155, 1.093011736869812, 0.9957738518714905],
      [1.0065701007843018, 0.993992030620575, 0.99944007396698],
      [0.9500976204872131, 1.0531989336013794, 0.996711015701294],
      [1.4178597927093506, 0.5926175117492676, 0.9895210862159729],
      [0.9623708128929138, 1.0395773649215698, 0.9980517029762268],
      [0.9148461222648621, 1.0909709930419922, 0.9941834807395935],
      [8.30653190612793, -4.753779411315918, -0.5527438521385193]
    ]
  >,
  bias: #Nx.Tensor<
    f32[3]
    EXLA.Backend<host:0, 0.2132677841.629800981.258122>
    [-0.492538720369339, 4.431742191314697, -3.9392051696777344]
  >
}
```

```elixir
test_preds = Scholar.Linear.LogisticRegression.predict(model, test_inputs)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[36]
  EXLA.Backend<host:0, 0.2132677841.629800981.258123>
  [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0]
>
```

```elixir
Scholar.Metrics.Classification.accuracy(test_targets, test_preds)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  EXLA.Backend<host:0, 0.2132677841.629800981.258124>
  0.4444444477558136
>
```

```elixir
# A confusion matrix is a table that lays out the performance of a model with
# respect to each class in a classification problem.
Scholar.Metrics.Classification.confusion_matrix(
  test_targets, test_preds, num_classes: 3)

# The table is two-dimensional where the columns represent a predicted class 
# and the rows represent the actual class.
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u64[3][3]
  EXLA.Backend<host:0, 0.2132677841.629800981.258158>
  [
    [11, 0, 0],
    [4, 5, 0],
    [9, 7, 0]
  ]
>
```

```elixir
# Confusion matrix plot.
Vl.new(title: "Confusion Matrix", width: 720, height: 480)
|> Vl.data_from_values(%{
  predicted: Nx.to_flat_list(test_preds),
  actual: Nx.to_flat_list(test_targets),
})
|> Vl.mark(:rect)
|> Vl.encode_field(:x, "predicted")
|> Vl.encode_field(:y, "actual")
|> Vl.encode(:color, aggregate: :count)

# Confusion matrices are good visualizations of classification performance for
# your models.
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"actual":0,"predicted":0},{"actual":1,"predicted":0},{"actual":0,"predicted":0},{"actual":2,"predicted":0},{"actual":2,"predicted":1},{"actual":2,"predicted":1},{"actual":0,"predicted":0},{"actual":2,"predicted":0},{"actual":0,"predicted":0},{"actual":1,"predicted":1},{"actual":1,"predicted":0},{"actual":1,"predicted":1},{"actual":0,"predicted":0},{"actual":0,"predicted":0},{"actual":0,"predicted":0},{"actual":2,"predicted":0},{"actual":1,"predicted":0},{"actual":1,"predicted":1},{"actual":2,"predicted":1},{"actual":0,"predicted":0},{"actual":2,"predicted":0},{"actual":2,"predicted":0},{"actual":2,"predicted":1},{"actual":2,"predicted":0},{"actual":1,"predicted":1},{"actual":2,"predicted":0},{"actual":0,"predicted":0},{"actual":0,"predicted":0},{"actual":1,"predicted":1},{"actual":2,"predicted":1},{"actual":2,"predicted":0},{"actual":2,"predicted":1},{"actual":2,"predicted":0},{"actual":2,"predicted":1},{"actual":0,"predicted":0},{"actual":1,"predicted":0}]},"encoding":{"color":{"aggregate":"count"},"x":{"field":"predicted"},"y":{"field":"actual"}},"height":480,"mark":"rect","title":"Confusion Matrix","width":720}
```

## Dealing with Non-linear Data

A lot of real-world data is not linear. Linear models often do not have sufficient capacity or modeling power to represent real-world relationships.

A way to deal with non-linear data is to perform transformations on your data until a linear relationship arises.

Feature engineering is the process of manipulating features by hand to provide better information for your model.

With the kernel trick, you apply high-dimensional transformations to the original data, such that it becomes linearly. The kernel trick allows you to model non-linear data with linear models.

Linear separability is the ability for a dataset to be partitioned or separated by a line.

## Learning from Your Surroundings

A K-Nearest Neighbors (KNN) model idea is that you are likely very similar to the things nearest to you.

KNN can be used for both regression and classification.

```elixir
model =
  Scholar.Neighbors.KNNClassifier.fit(
    train_inputs,
    train_targets,
    num_neighbors: 5,
    num_classes: 3
  )

# KNN doesn’t require any training because you just sample from existing data during
# inference time.
```

<!-- livebook:{"output":true} -->

```
%Scholar.Neighbors.KNNClassifier{
  algorithm: %Scholar.Neighbors.BruteKNN{
    num_neighbors: 5,
    metric: &Scholar.Metrics.Distance.pairwise_minkowski/2,
    data: #Nx.Tensor<
      f32[142][13]
      EXLA.Backend<host:0, 0.2132677841.629800981.258115>
      [
        [0.008482798933982849, 0.0020596832036972046, 0.0012798609677702188, 0.009447159245610237, 0.06064159795641899, 0.0018572865519672632, 0.001809663837775588, 8.333979349117726e-5, 0.0012262853560969234, 0.0028395054396241903, 5.41708548553288e-4, 0.0019703905563801527, 0.6339002251625061],
        [0.007214843761175871, 0.00223231571726501, 0.0012322383699938655, 0.010935370810329914, 0.0665944442152977, 7.441052002832294e-4, 3.8693469832651317e-4, 9.524546476313844e-5, 6.012369995005429e-4, 0.004809895996004343, 3.0954775866121054e-4, 0.0011131813516840339, 0.5088905692100525],
        [0.007423193659633398, 7.202938431873918e-4, 0.0010536529589444399, 0.010935370810329914, 0.0523076206445694, 7.85775133408606e-4, 7.321995217353106e-4, 9.524546476313844e-5, 7.262466824613512e-4, 0.0013810594100505114, 5.41708548553288e-4, 0.0015715501504018903, 0.33447229862213135],
        [0.007167221046984196, 7.85775133408606e-4, 0.0014286820078268647, 0.011233012191951275, 0.06183216720819473, 0.0010477000614628196, 9.643603698350489e-4, ...],
        ...
      ]
    >,
    batch_size: nil
  },
  num_classes: 3,
  weights: :uniform,
  labels: #Nx.Tensor<
    s64[142]
    EXLA.Backend<host:0, 0.2132677841.629800987.258782>
    [0, 2, 1, 1, 0, 0, 2, 1, 1, 1, 2, 1, 2, 2, 1, 0, 1, 0, 0, 2, 2, 1, 0, 0, 2, 0, 2, 1, 0, 2, 2, 1, 2, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 2, 2, ...]
  >
}
```

```elixir
test_preds = Scholar.Neighbors.KNNClassifier.predict(model, test_inputs)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[36]
  EXLA.Backend<host:0, 0.2132677841.629800981.258156>
  [0, 0, 0, 2, 1, 2, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 2, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 2, 1, 2, 0, 2, 0, 1]
>
```

```elixir
Scholar.Metrics.Classification.accuracy(test_targets, test_preds)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  EXLA.Backend<host:0, 0.2132677841.629800981.258157>
  0.694444477558136
>
```

```elixir
Scholar.Metrics.Classification.confusion_matrix(
  test_targets, test_preds, num_classes: 3)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  u64[3][3]
  EXLA.Backend<host:0, 0.2132677841.629800981.258159>
  [
    [11, 0, 0],
    [2, 6, 1],
    [5, 3, 8]
  ]
>
```

```elixir
# Confusion matrix plot.
Vl.new(title: "Confusion Matrix", width: 720, height: 480)
|> Vl.data_from_values(%{
  predicted: Nx.to_flat_list(test_preds),
  actual: Nx.to_flat_list(test_targets),
})
|> Vl.mark(:rect)
|> Vl.encode_field(:x, "predicted")
|> Vl.encode_field(:y, "actual")
|> Vl.encode(:color, aggregate: :count)

# Confusion matrices are good visualizations of classification performance for
# your models.


```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","data":{"values":[{"actual":0,"predicted":0},{"actual":1,"predicted":0},{"actual":0,"predicted":0},{"actual":2,"predicted":2},{"actual":2,"predicted":1},{"actual":2,"predicted":2},{"actual":0,"predicted":0},{"actual":2,"predicted":0},{"actual":0,"predicted":0},{"actual":1,"predicted":1},{"actual":1,"predicted":1},{"actual":1,"predicted":1},{"actual":0,"predicted":0},{"actual":0,"predicted":0},{"actual":0,"predicted":0},{"actual":2,"predicted":1},{"actual":1,"predicted":0},{"actual":1,"predicted":1},{"actual":2,"predicted":2},{"actual":0,"predicted":0},{"actual":2,"predicted":0},{"actual":2,"predicted":2},{"actual":2,"predicted":2},{"actual":2,"predicted":0},{"actual":1,"predicted":2},{"actual":2,"predicted":0},{"actual":0,"predicted":0},{"actual":0,"predicted":0},{"actual":1,"predicted":1},{"actual":2,"predicted":2},{"actual":2,"predicted":1},{"actual":2,"predicted":2},{"actual":2,"predicted":0},{"actual":2,"predicted":2},{"actual":0,"predicted":0},{"actual":1,"predicted":1}]},"encoding":{"color":{"aggregate":"count"},"x":{"field":"predicted"},"y":{"field":"actual"}},"height":480,"mark":"rect","title":"Confusion Matrix","width":720}
```

## Using Clustering

Scholar offers a number of tools for unsupervised learning and analysis.

Unsupervised learning is a type of machine learning where you learn only 
from inputs without access to any target information.

The most common type of unsupervised learning is clustering.

Clustering is the process of identifying clusters or groups of similar
data points in a dataset.

K-Means clustering randomly assigns K centroids to random points in the dataset, 
and iteratively updates each centroid until an optimal configuration is reached.

One of the central challenges in clustering is determining an appropriate
number of clusters to use.

```elixir
model = Scholar.Cluster.KMeans.fit(train_inputs, num_clusters: 3)
```

<!-- livebook:{"output":true} -->

```
%Scholar.Cluster.KMeans{
  num_iterations: #Nx.Tensor<
    s64
    EXLA.Backend<host:0, 0.2132677841.629800981.258231>
    4
  >,
  clusters: #Nx.Tensor<
    f32[3][13]
    EXLA.Backend<host:0, 0.2132677841.629800981.258232>
    [
      [0.007300947327166796, 0.0013411965919658542, 0.0012879398418590426, 0.012381060048937798, 0.055039554834365845, 0.001194395124912262, 0.0010395150166004896, 1.5201004862319678e-4, 8.143699378706515e-4, 0.0020900850649923086, 5.024836282245815e-4, 0.001465143053792417, 0.2699902653694153],
      [0.0075854407623410225, 0.0014048706507310271, 0.001337489578872919, 0.011515455320477486, 0.062237463891506195, 0.001166883623227477, 8.322579087689519e-4, 1.531273446744308e-4, 7.807087968103588e-4, 0.0031489264219999313, 4.5781151857227087e-4, 0.0013448355020955205, 0.42978107929229736],
      [0.008112502284348011, 0.0010515161557123065, 0.001357400557026267, 0.01010197214782238, 0.0628548339009285, 0.0016271101776510477, 0.0017101445700973272, 8.623988833278418e-5, 0.0010393051197752357, 0.0033070321660488844, 5.526984459720552e-4, 0.0017945527797564864, 0.6991831064224243]
    ]
  >,
  inertia: #Nx.Tensor<
    f32
    EXLA.Backend<host:0, 0.2132677841.629800981.258233>
    0.662773609161377
  >,
  labels: #Nx.Tensor<
    s64[142]
    EXLA.Backend<host:0, 0.2132677841.629800981.258234>
    [2, 1, 0, 0, 2, 2, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 1, 2, 1, 0, 1, 0, 2, 2, 0, 2, 1, 0, 2, 1, 1, 1, 0, 1, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, ...]
  >
}
```

```elixir
wine_features = %{
  "feature_1" => train_inputs[[.., 1]] |> Nx.to_flat_list(),
  "feature_2" => train_inputs[[.., 2]] |> Nx.to_flat_list(),
  "class" => train_targets |> Nx.to_flat_list()
}

coords = [
  cluster_feature_1: model.clusters[[.., 1]] |> Nx.to_flat_list(),
  cluster_feature_2: model.clusters[[.., 2]] |> Nx.to_flat_list()
]

title =
  "Scatterplot of data samples pojected on plane wine" <>
    " feature 1 x wine feature 2"

Vl.new(
  width: 1440,
  height: 1080,
  title: [
    text: title,
    offset: 25
  ]
)
|> Vl.layers([
  Vl.new()
  |> Vl.data_from_values(wine_features)
  |> Vl.mark(:circle)
  |> Vl.encode_field(:x, "feature_1", type: :quantitative)
  |> Vl.encode_field(:y, "feature_2", type: :quantitative)
  |> Vl.encode_field(:color, "class"),
  Vl.new()
  |> Vl.data_from_values(coords)
  |> Vl.mark(:circle, color: :green, size: 100)
  |> Vl.encode_field(:x, "cluster_feature_1", type: :quantitative)
  |> Vl.encode_field(:y, "cluster_feature_2", type: :quantitative)
])
```

<!-- livebook:{"output":true} -->

```vega-lite
{"$schema":"https://vega.github.io/schema/vega-lite/v5.json","height":1080,"layer":[{"data":{"values":[{"class":0,"feature_1":0.0020596832036972046,"feature_2":0.0012798609677702188},{"class":2,"feature_1":0.00223231571726501,"feature_2":0.0012322383699938655},{"class":1,"feature_1":7.202938431873918e-4,"feature_2":0.0010536529589444399},{"class":1,"feature_1":7.85775133408606e-4,"feature_2":0.0014286820078268647},{"class":0,"feature_1":0.0010834172135218978,"feature_2":0.0014108234317973256},{"class":0,"feature_1":9.762659901753068e-4,"feature_2":0.0014822573866695166},{"class":2,"feature_1":0.0016846541548147798,"feature_2":0.00147630472201854},{"class":1,"feature_1":0.0014405876863747835,"feature_2":0.0012739080702885985},{"class":1,"feature_1":0.0013512950390577316,"feature_2":0.0013632007176056504},{"class":1,"feature_1":8.214921108447015e-4,"feature_2":0.0013632007176056504},{"class":2,"feature_1":0.0014465403510257602,"feature_2":0.001321530668064952},{"class":1,"feature_1":9.465018520131707e-4,"feature_2":0.001041747280396521},{"class":2,"feature_1":0.001976343570277095,"feature_2":0.001321530668064952},{"class":2,"feature_1":0.001387012074701488,"feature_2":0.0012322383699938655},{"class":1,"feature_1":0.0022204099223017693,"feature_2":0.0013036723248660564},{"class":0,"feature_1":7.262466824613512e-4,"feature_2":0.0012739080702885985},{"class":1,"feature_1":5.119444103911519e-4,"feature_2":0.0010834172135218978},{"class":0,"feature_1":9.465018520131707e-4,"feature_2":0.001196521334350109},{"class":0,"feature_1":0.0021846930030733347,"feature_2":0.0015001160791143775},{"class":2,"feature_1":0.0017263240879401565,"feature_2":0.0013036723248660564},{"class":2,"feature_1":0.001595361391082406,"feature_2":0.0015298804501071572},{"class":1,"feature_1":8.214921108447015e-4,"feature_2":0.0015120217576622963},{"class":0,"feature_1":9.524546912871301e-4,"feature_2":0.0013572480529546738},{"class":0,"feature_1":9.226904367096722e-4,"feature_2":0.0012381910346448421},{"class":2,"feature_1":0.0032026288099586964,"feature_2":0.0014941634144634008},{"class":0,"feature_1":0.0023275609128177166,"feature_2":0.0013751063961535692},{"class":2,"feature_1":0.002035871846601367,"feature_2":0.001327483681961894},{"class":1,"feature_1":0.0021489758510142565,"feature_2":0.0010060302447527647},{"class":0,"feature_1":7.738693966530263e-4,"feature_2":0.0014108234317973256},{"class":2,"feature_1":0.0027323542162775993,"feature_2":0.0014346347888931632},{"class":2,"feature_1":0.0014643990434706211,"feature_2":0.0013334363466128707},{"class":1,"feature_1":9.524546912871301e-4,"feature_2":0.001101275673136115},{"class":2,"feature_1":0.0012977193109691143,"feature_2":0.0013512950390577316},{"class":1,"feature_1":4.8218018491752446e-4,"feature_2":0.001327483681961894},{"class":0,"feature_1":8.988790796138346e-4,"feature_2":0.0012143796775490046},{"class":0,"feature_1":0.0010953228920698166,"feature_2":0.0015179747715592384},{"class":1,"feature_1":8.333977893926203e-4,"feature_2":0.0012858137488365173},{"class":0,"feature_1":8.929262403398752e-4,"feature_2":0.0012798609677702188},{"class":0,"feature_1":9.405490127392113e-4,"feature_2":0.0012977193109691143},{"class":1,"feature_1":7.321995217353106e-4,"feature_2":0.0011250870302319527},{"class":1,"feature_1":3.631233412306756e-4,"feature_2":0.0014108234317973256},{"class":1,"feature_1":0.0022263627033680677,"feature_2":0.0013512950390577316},{"class":1,"feature_1":9.167375974357128e-4,"feature_2":0.0014822573866695166},{"class":1,"feature_1":9.643603698350489e-4,"feature_2":0.0012798609677702188},{"class":2,"feature_1":0.0018632394494488835,"feature_2":0.0014346347888931632},{"class":2,"feature_1":0.0018870508065447211,"feature_2":0.0012798609677702188},{"class":1,"feature_1":0.002559721702709794,"feature_2":0.0015477387933060527},{"class":1,"feature_1":0.0011846154229715466,"feature_2":0.001553691690787673},{"class":0,"feature_1":8.691148832440376e-4,"feature_2":0.0013989177532494068},{"class":0,"feature_1":0.0022085043601691723,"feature_2":0.0011846154229715466},{"class":1,"feature_1":0.001190568320453167,"feature_2":0.0015775030478835106},{"class":0,"feature_1":0.0010357944993302226,"feature_2":0.0013393893605098128},{"class":1,"feature_1":0.0011429456062614918,"feature_2":0.0018453808734193444},{"class":0,"feature_1":0.002291843993589282,"feature_2":0.0012858137488365173},{"class":2,"feature_1":0.0028692695777863264,"feature_2":0.001321530668064952},{"class":0,"feature_1":0.0010298416018486023,"feature_2":0.001327483681961894},{"class":0,"feature_1":8.15539329778403e-4,"feature_2":0.0011727097444236279},{"class":0,"feature_1":0.0011250870302319527,"feature_2":0.0013512950390577316},{"class":0,"feature_1":0.0010000773472711444,"feature_2":0.00147630472201854},{"class":1,"feature_1":5.714728031307459e-4,"feature_2":0.0012917666463181376},{"class":1,"feature_1":0.001041747280396521,"feature_2":0.0010655586374923587},{"class":0,"feature_1":9.524546912871301e-4,"feature_2":0.0011369927087798715},{"class":1,"feature_1":8.929262403398752e-4,"feature_2":0.0012917666463181376},{"class":0,"feature_1":8.333977893926203e-4,"feature_2":0.0015298804501071572},{"class":0,"feature_1":9.762659901753068e-4,"feature_2":0.0011727097444236279},{"class":1,"feature_1":0.0011072285706177354,"feature_2":0.0012798609677702188},{"class":0,"feature_1":0.002297797007486224,"feature_2":0.001416776329278946},{"class":0,"feature_1":9.04831918887794e-4,"feature_2":0.0014703517081215978},{"class":0,"feature_1":9.345961734652519e-4,"feature_2":0.0012917666463181376},{"class":1,"feature_1":0.0015179747715592384,"feature_2":0.0016608427977189422},{"class":1,"feature_1":9.107847581617534e-4,"feature_2":0.0012560496106743813},{"class":1,"feature_1":8.333977893926203e-4,"feature_2":0.0012679552892223},{"class":1,"feature_1":7.500580395571887e-4,"feature_2":0.0014108234317973256},{"class":1,"feature_1":0.0024882876314222813,"feature_2":0.001345342374406755},{"class":0,"feature_1":9.04831918887794e-4,"feature_2":0.0014405876863747835},{"class":0,"feature_1":9.822188876569271e-4,"feature_2":0.001196521334350109},{"class":2,"feature_1":0.0018513337709009647,"feature_2":0.0013393893605098128},{"class":0,"feature_1":9.94124566204846e-4,"feature_2":0.0015001160791143775},{"class":1,"feature_1":6.667182897217572e-4,"feature_2":0.0010655586374923587},{"class":1,"feature_1":4.52415959443897e-4,"feature_2":0.001458446029573679},{"class":2,"feature_1":0.0026609201449900866,"feature_2":0.0016251257620751858},{"class":2,"feature_1":0.001869192230515182,"feature_2":0.001458446029573679},{"class":1,"feature_1":6.190955173224211e-4,"feature_2":0.0010655586374923587},{"class":1,"feature_1":7.619637181051075e-4,"feature_2":0.001101275673136115},{"class":2,"feature_1":9.167375974357128e-4,"feature_2":0.0014941634144634008},{"class":2,"feature_1":0.0019287205068394542,"feature_2":0.0012917666463181376},{"class":1,"feature_1":0.001160804065875709,"feature_2":9.345961734652519e-4},{"class":1,"feature_1":0.0016429844545200467,"feature_2":0.001250096713192761},{"class":1,"feature_1":6.905295886099339e-4,"feature_2":0.0010774643160402775},{"class":0,"feature_1":0.0014643990434706211,"feature_2":0.0016310784267261624},{"class":1,"feature_1":0.0011488983873277903,"feature_2":0.001387012074701488},{"class":0,"feature_1":9.167375974357128e-4,"feature_2":0.0012620023917406797},{"class":2,"feature_1":0.0015120217576622963,"feature_2":0.0013989177532494068},{"class":2,"feature_1":0.002250174293294549,"feature_2":0.0013989177532494068},{"class":1,"feature_1":8.810205617919564e-4,"feature_2":0.0012262853560969234},{"class":0,"feature_1":0.0010536529589444399,"feature_2":0.0015894087264314294},{"class":0,"feature_1":8.988790796138346e-4,"feature_2":0.001613220083527267},{"class":0,"feature_1":9.405490127392113e-4,"feature_2":0.0013691537315025926},{"class":1,"feature_1":0.0010000773472711444,"feature_2":0.0012322383699938655},{"class":1,"feature_1":0.0024823350831866264,"feature_2":0.0013393893605098128},{"class":0,"feature_1":0.0010477000614628196,"feature_2":0.0014643990434706211},{"class":1,"feature_1":6.310012540780008e-4,"feature_2":9.643603698350489e-4},{"class":0,"feature_1":9.524546912871301e-4,"feature_2":0.001387012074701488},{"class":2,"feature_1":0.0026668731588870287,"feature_2":0.0013989177532494068},{"class":2,"feature_1":0.0020596832036972046,"feature_2":0.0012262853560969234},{"class":2,"feature_1":6.607654504477978e-4,"feature_2":0.0012620023917406797},{"class":0,"feature_1":8.036336512304842e-4,"feature_2":0.0013036723248660564},{"class":1,"feature_1":8.810205617919564e-4,"feature_2":0.0012381910346448421},{"class":2,"feature_1":0.0015655973693355918,"feature_2":0.0012917666463181376},{"class":0,"feature_1":8.572092046961188e-4,"feature_2":0.0014822573866695166},{"class":0,"feature_1":9.643603698350489e-4,"feature_2":0.0013632007176056504},{"class":1,"feature_1":8.214921108447015e-4,"feature_2":0.0012322383699938655},{"class":0,"feature_1":0.0010655586374923587,"feature_2":0.0015417860122397542},{"class":1,"feature_1":4.8218018491752446e-4,"feature_2":7.321995217353106e-4},{"class":2,"feature_1":0.0017025127308443189,"feature_2":0.0013512950390577316},{"class":1,"feature_1":0.0013691537315025926,"feature_2":0.0012143796775490046},{"class":1,"feature_1":5.059915711171925e-4,"feature_2":0.0012560496106743813},{"class":1,"feature_1":8.810205617919564e-4,"feature_2":0.0012977193109691143},{"class":2,"feature_1":0.002470429288223386,"feature_2":0.0012679552892223},{"class":1,"feature_1":5.952841602265835e-4,"feature_2":0.001208427012898028},{"class":1,"feature_1":9.524546912871301e-4,"feature_2":0.0011846154229715466},{"class":0,"feature_1":9.107847581617534e-4,"feature_2":0.001327483681961894},{"class":0,"feature_1":0.0012024739990010858,"feature_2":0.00147630472201854},{"class":1,"feature_1":0.001208427012898028,"feature_2":0.0012143796775490046},{"class":1,"feature_1":0.0016072670696303248,"feature_2":0.0012441439321264625},{"class":1,"feature_1":9.167375974357128e-4,"feature_2":0.0014703517081215978},{"class":1,"feature_1":8.274449501186609e-4,"feature_2":0.0012322383699938655},{"class":0,"feature_1":9.226904367096722e-4,"feature_2":0.0011846154229715466},{"class":1,"feature_1":5.774256424047053e-4,"feature_2":0.0012798609677702188},{"class":2,"feature_1":0.0010536529589444399,"feature_2":0.0015596444718539715},{"class":1,"feature_1":0.001809663837775588,"feature_2":0.0012381910346448421},{"class":1,"feature_1":4.583687987178564e-4,"feature_2":9.405490127392113e-4},{"class":2,"feature_1":6.905295886099339e-4,"feature_2":0.0011727097444236279},{"class":2,"feature_1":0.00220255134627223,"feature_2":0.0013393893605098128},{"class":0,"feature_1":9.524546912871301e-4,"feature_2":0.0012739080702885985},{"class":1,"feature_1":0.0033752613235265017,"feature_2":0.001190568320453167},{"class":0,"feature_1":8.75067722517997e-4,"feature_2":0.0014227291103452444},{"class":2,"feature_1":0.001809663837775588,"feature_2":0.0015417860122397542},{"class":1,"feature_1":5.952841602265835e-4,"feature_2":0.001416776329278946},{"class":0,"feature_1":0.001327483681961894,"feature_2":0.0015120217576622963},{"class":1,"feature_1":0.0013810594100505114,"feature_2":0.001387012074701488},{"class":1,"feature_1":0.0019644377753138542,"feature_2":0.0011131813516840339}]},"encoding":{"color":{"field":"class"},"x":{"field":"feature_1","type":"quantitative"},"y":{"field":"feature_2","type":"quantitative"}},"mark":"circle"},{"data":{"values":[{"cluster_feature_1":0.0013411965919658542,"cluster_feature_2":0.0012879398418590426},{"cluster_feature_1":0.0014048706507310271,"cluster_feature_2":0.001337489578872919},{"cluster_feature_1":0.0010515161557123065,"cluster_feature_2":0.001357400557026267}]},"encoding":{"x":{"field":"cluster_feature_1","type":"quantitative"},"y":{"field":"cluster_feature_2","type":"quantitative"}},"mark":{"color":"green","size":100,"type":"circle"}}],"title":{"offset":25,"text":"Scatterplot of data samples pojected on plane wine feature 1 x wine feature 2"},"width":1440}
```

```elixir
test_preds = Scholar.Cluster.KMeans.predict(model, test_inputs)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  s64[36]
  EXLA.Backend<host:0, 0.2132677841.629800981.258243>
  [1, 1, 2, 1, 0, 0, 2, 1, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 0, 2, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 1, 1, 1, 0, 2, 1]
>
```

```elixir
Scholar.Metrics.Classification.accuracy(test_targets, test_preds)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32
  EXLA.Backend<host:0, 0.2132677841.629800981.258244>
  0.1388888955116272
>
```

## Making Decisions

Decision trees construct nested tree based on input features. Decision trees construct a hierarchical decision flow that partitions input features into one of a desired number of classes.

Decision trees are incredibly popular because they are interpretable, and they perform very well on certain classes of data.

Decision trees are one of the few classes of algorithms that outperform deep learning models, specifically on tabular data and time-series data.

Gradient boosting is a type of ensemble method that constructs many weak classifiers iteratively by building classifiers to cover the weaknesses of previous classifiers. Ensemble methods are a class of machine learning methods that construct a model, which is an aggregate of many models.

Elixir has a new decision tree library in EXGBoost.
